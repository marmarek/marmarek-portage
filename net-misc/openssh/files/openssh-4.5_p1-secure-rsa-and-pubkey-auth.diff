Centralized public key file
(c) Szpajder
diff -Nur openssh-4.2p1.old/auth-rsa.c openssh-4.2p1/auth-rsa.c
--- openssh-4.2p1.old/auth-rsa.c	2005-06-17 04:59:35.000000000 +0200
+++ openssh-4.2p1/auth-rsa.c	2005-09-29 15:27:19.000000000 +0200
@@ -161,25 +161,18 @@
 	struct stat st;
 	Key *key;
 
-	/* Temporarily use the user's uid. */
-	temporarily_use_uid(pw);
-
 	/* The authorized keys. */
 	file = authorized_keys_file(pw);
 	debug("trying public RSA key file %s", file);
 
 	/* Fail quietly if file does not exist */
 	if (stat(file, &st) < 0) {
-		/* Restore the privileged uid. */
-		restore_uid();
 		xfree(file);
 		return (0);
 	}
 	/* Open the file containing the authorized keys. */
 	f = fopen(file, "r");
 	if (!f) {
-		/* Restore the privileged uid. */
-		restore_uid();
 		xfree(file);
 		return (0);
 	}
@@ -188,7 +181,6 @@
 		xfree(file);
 		fclose(f);
 		logit("Authentication refused: %s", line);
-		restore_uid();
 		return (0);
 	}
 
@@ -205,6 +197,7 @@
 	while (read_keyfile_line(f, file, line, sizeof(line), &linenum) != -1) {
 		char *cp;
 		char *key_options;
+		char *user;
 		int keybits;
 
 		/* Skip leading whitespace, empty and comment lines. */
@@ -243,6 +236,14 @@
 		if (BN_cmp(key->rsa->n, client_n) != 0)
 			continue;
 
+		/* Now get the comment field. This is the username. */
+		/* Skip spaces */
+		for (; *cp == ' ' || *cp == '\t'; cp++)
+			;
+		for (user=cp; *cp != ' ' && *cp != '\t' && *cp != '\n'; cp++)
+			;
+		*cp = '\0';
+
 		/* check the real bits  */
 		keybits = BN_num_bits(key->rsa->n);
 		if (keybits < 0 || bits != (u_int)keybits)
@@ -258,14 +259,24 @@
 		if (!auth_parse_options(pw, key_options, file, linenum))
 			continue;
 
+		if (*options.authorized_keys_file=='/') {
+			/* Check the user */
+			if(strlen(user)) {
+				if(strncmp(user, pw->pw_name, strlen(pw->pw_name)+1)) {
+					logit("RSA warning: User %s tried to use public key of user %s!", pw->pw_name, user);
+					break;
+				}
+			} else {
+				logit("RSA warning: no username associated with key - refusing connection.");
+				break;
+			}
+		}
+
 		/* break out, this key is allowed */
 		allowed = 1;
 		break;
 	}
 
-	/* Restore the privileged uid. */
-	restore_uid();
-
 	/* Close the file. */
 	xfree(file);
 	fclose(f);
diff -Nur openssh-4.2p1.old/auth2-pubkey.c openssh-4.2p1/auth2-pubkey.c
--- openssh-4.2p1.old/auth2-pubkey.c	2004-12-11 03:39:50.000000000 +0100
+++ openssh-4.2p1/auth2-pubkey.c	2005-09-29 15:26:05.000000000 +0200
@@ -165,7 +165,7 @@
 	return authenticated;
 }
 
-/* return 1 if user allows given key */
+/* return 1 if the admin allows given key */
 static int
 user_key_allowed2(struct passwd *pw, Key *key, char *file)
 {
@@ -177,22 +177,16 @@
 	Key *found;
 	char *fp;
 
-	/* Temporarily use the user's uid. */
-	temporarily_use_uid(pw);
-
 	debug("trying public key file %s", file);
 
 	/* Fail quietly if file does not exist */
 	if (stat(file, &st) < 0) {
-		/* Restore the privileged uid. */
-		restore_uid();
 		return 0;
 	}
 	/* Open the file containing the authorized keys. */
 	f = fopen(file, "r");
 	if (!f) {
 		/* Restore the privileged uid. */
-		restore_uid();
 		return 0;
 	}
 	if (options.strict_modes &&
@@ -208,6 +202,7 @@
 
 	while (read_keyfile_line(f, file, line, sizeof(line), &linenum) != -1) {
 		char *cp, *key_options = NULL;
+		char *user;
 
 		/* Skip leading whitespace, empty and comment lines. */
 		for (cp = line; *cp == ' ' || *cp == '\t'; cp++)
@@ -237,6 +232,24 @@
 		}
 		if (key_equal(found, key) &&
 		    auth_parse_options(pw, key_options, file, linenum) == 1) {
+			if (*options.authorized_keys_file=='/') {
+				/* Check the user. */
+				for(; *cp == ' ' || *cp == '\t'; cp++)
+					;
+				for(user=cp; *cp != ' ' && *cp != '\t' && *cp != '\n'; cp++)
+					;
+				*cp = '\0';
+				if(strlen(user)) {
+					if(strncmp(user, pw->pw_name, strlen(pw->pw_name)+1)) {
+						logit("pkauth warning: User %s tried to use public key of user %s!", pw->pw_name, user);
+						break;
+					}
+				} else {
+					logit("pkauth warning: no username associated with key - refusing connection.");
+					break;
+				}
+			}
+
 			found_key = 1;
 			debug("matching key found: file %s, line %lu",
 			    file, linenum);
@@ -247,7 +260,6 @@
 			break;
 		}
 	}
-	restore_uid();
 	fclose(f);
 	key_free(found);
 	if (!found_key)
