diff -Naru mutt-1.5.20.orig/OPS mutt-1.5.20/OPS
--- mutt-1.5.20.orig/OPS	2010-06-27 12:43:41.852008704 +0200
+++ mutt-1.5.20/OPS	2010-06-27 12:38:38.812007508 +0200
@@ -61,6 +61,7 @@
 OP_DISPLAY_ADDRESS "display full address of sender"
 OP_DISPLAY_HEADERS "display message and toggle header weeding"
 OP_DISPLAY_MESSAGE "display a message"
+OP_EDIT_LABEL "add, change, or delete a message's label"
 OP_EDIT_MESSAGE "edit the raw message"
 OP_EDITOR_BACKSPACE "delete the char in front of the cursor"
 OP_EDITOR_BACKWARD_CHAR "move the cursor one character to the left"
diff -Naru mutt-1.5.20.orig/PATCHES mutt-1.5.20/PATCHES
--- mutt-1.5.20.orig/PATCHES	2010-06-27 12:43:41.852008704 +0200
+++ mutt-1.5.20/PATCHES	2010-06-27 12:38:38.812007508 +0200
@@ -1,3 +1,4 @@
+patch-1.5.16.dgc.xlabel_ext.9
 dgc.subjrx
 fg.smarttime
 vvv.initials
diff -Naru mutt-1.5.20.orig/commands.c mutt-1.5.20/commands.c
--- mutt-1.5.20.orig/commands.c	2010-06-27 12:43:41.917006329 +0200
+++ mutt-1.5.20/commands.c	2010-06-27 12:38:38.972005739 +0200
@@ -532,9 +532,9 @@
   int method = Sort; /* save the current method in case of abort */
 
   switch (mutt_multi_choice (reverse ?
-			     _("Rev-Sort (d)ate/(f)rm/(r)ecv/(s)ubj/t(o)/(t)hread/(u)nsort/si(z)e/s(c)ore/s(p)am?: ") :
-			     _("Sort (d)ate/(f)rm/(r)ecv/(s)ubj/t(o)/(t)hread/(u)nsort/si(z)e/s(c)ore/s(p)am?: "),
-			     _("dfrsotuzcp")))
+			     _("Rev-Sort Date/Frm/Recv/Subj/tO/Thread/Unsort/siZe/sCore/sPam/Label?: ") :
+			     _("Sort Date/Frm/Recv/Subj/tO/Thread/Unsort/siZe/sCore/sPam/Label?: "),
+			     _("dfrsotuzcpl")))
   {
   case -1: /* abort - don't resort */
     return -1;
@@ -578,6 +578,10 @@
   case 10: /* s(p)am */
     Sort = SORT_SPAM;
     break;
+
+  case 11: /* (l)abel */
+    Sort = SORT_LABEL;
+    break;
   }
   if (reverse)
     Sort |= SORT_REVERSE;
diff -Naru mutt-1.5.20.orig/copy.c mutt-1.5.20/copy.c
--- mutt-1.5.20.orig/copy.c	2010-06-27 12:43:41.985005591 +0200
+++ mutt-1.5.20/copy.c	2010-06-27 12:38:39.004007106 +0200
@@ -111,6 +111,10 @@
 	ignore = 0;
       }
 
+      if (flags & CH_UPDATE_LABEL &&
+	  mutt_strncasecmp ("X-Label:", buf, 8) == 0)
+	continue;
+
       if (!ignore && fputs (buf, out) == EOF)
 	return (-1);
     }
@@ -412,6 +416,15 @@
       fprintf (out, "Lines: %d\n", h->lines);
   }
 
+  if (flags & CH_UPDATE_LABEL && h->xlabel_changed)
+  {
+    h->xlabel_changed = 0;
+    if (h->env->x_label != NULL)
+      if (fprintf(out, "X-Label: %s\n", h->env->x_label) !=
+		  10 + strlen(h->env->x_label))
+        return -1;
+  }
+
   if ((flags & CH_NONEWLINE) == 0)
   {
     if (flags & CH_PREFIX)
@@ -492,6 +505,9 @@
       _mutt_make_string (prefix, sizeof (prefix), NONULL (Prefix), Context, hdr, 0);
   }
 
+  if (hdr->xlabel_changed)
+    chflags |= CH_UPDATE_LABEL;
+
   if ((flags & M_CM_NOHEADER) == 0)
   {
     if (flags & M_CM_PREFIX)
diff -Naru mutt-1.5.20.orig/copy.h mutt-1.5.20/copy.h
--- mutt-1.5.20.orig/copy.h	2009-06-13 01:38:52.000000000 +0200
+++ mutt-1.5.20/copy.h	2010-06-27 12:41:39.845006017 +0200
@@ -53,6 +53,7 @@
 #define CH_UPDATE_IRT     (1<<16) /* update In-Reply-To: */
 #define CH_UPDATE_REFS    (1<<17) /* update References: */
 #define CH_DISPLAY        (1<<18) /* display result to user */
+#define CH_UPDATE_LABEL   (1<<19) /* update X-Label: from hdr->env->x_label? */
 
 
 int mutt_copy_hdr (FILE *, FILE *, LOFF_T, LOFF_T, int, const char *);
diff -Naru mutt-1.5.20.orig/curs_main.c mutt-1.5.20/curs_main.c
--- mutt-1.5.20.orig/curs_main.c	2010-06-27 12:43:42.009006227 +0200
+++ mutt-1.5.20/curs_main.c	2010-06-27 12:38:39.032006793 +0200
@@ -2166,6 +2166,21 @@
 	menu->redraw = REDRAW_FULL;
 	break;
 
+      case OP_EDIT_LABEL:
+
+	CHECK_MSGCOUNT;
+	CHECK_READONLY;
+	rc = mutt_label_message(tag ? NULL : CURHDR);
+	if (rc > 0) {
+	  Context->changed = 1;
+	  menu->redraw = REDRAW_FULL;
+	  mutt_message ("%d label%s changed.", rc, rc == 1 ? "" : "s");
+	}
+	else {
+	  mutt_message _("No labels changed.");
+	}
+	break;
+
       case OP_LIST_REPLY:
 
 	CHECK_ATTACH;
diff -Naru mutt-1.5.20.orig/doc/manual.xml.head mutt-1.5.20/doc/manual.xml.head
--- mutt-1.5.20.orig/doc/manual.xml.head	2010-06-27 12:43:42.045007493 +0200
+++ mutt-1.5.20/doc/manual.xml.head	2010-06-27 12:38:39.100006199 +0200
@@ -5532,6 +5532,18 @@
 </para>
 
 <para>
+You can change or delete the ``X-Label:'' field within Mutt using the
+``edit-label'' command, bound to the ``y'' key by default.  This works
+for tagged messages, too.
+</para>
+
+<para>
+You can change or delete the ``X-Label:'' field within Mutt using the
+``edit-label'' command, bound to the ``y'' key by default.  This works
+for tagged messages, too.
+</para>
+
+<para>
 Lastly, Mutt has the ability to <link linkend="sort">sort</link> the mailbox into
 <link linkend="threads">threads</link>.  A thread is a group of messages which all relate to the same
 subject.  This is usually organized into a tree-like structure where a
diff -Naru mutt-1.5.20.orig/functions.h mutt-1.5.20/functions.h
--- mutt-1.5.20.orig/functions.h	2010-06-27 12:43:42.144005887 +0200
+++ mutt-1.5.20/functions.h	2010-06-27 12:38:39.136006321 +0200
@@ -103,6 +103,7 @@
   { "delete-thread",		OP_DELETE_THREAD,		"\004" },
   { "delete-subthread",		OP_DELETE_SUBTHREAD,		"\033d" },
   { "edit",			OP_EDIT_MESSAGE,		"e" },
+  { "edit-label",		OP_EDIT_LABEL,			"y" },
   { "edit-type",		OP_EDIT_TYPE,			"\005" },
   { "forward-message",		OP_FORWARD_MESSAGE,		"f" },
 #ifdef USE_NNTP
@@ -209,6 +210,7 @@
   { "set-flag",  	OP_MAIN_SET_FLAG,		"w" },
   { "clear-flag",       OP_MAIN_CLEAR_FLAG,		"W" },
   { "edit",		OP_EDIT_MESSAGE,		"e" },
+  { "edit-label",	OP_EDIT_LABEL,			"y" },
   { "edit-type",	OP_EDIT_TYPE,			"\005" },
 #ifdef USE_NNTP
   { "followup-message",	OP_FOLLOWUP,			"F" },
diff -Naru mutt-1.5.20.orig/headers.c mutt-1.5.20/headers.c
--- mutt-1.5.20.orig/headers.c	2010-06-27 12:43:42.201006367 +0200
+++ mutt-1.5.20/headers.c	2010-06-27 12:38:39.160005994 +0200
@@ -218,3 +218,59 @@
     }
   }
 }
+
+/*
+ * dgc: Add an X-Label: field.
+ */
+static int label_message(HEADER *hdr, char *new)
+{
+	if (hdr == NULL)
+		return 0;
+	if (hdr->env->x_label == NULL && new == NULL)
+		return 0;
+	if (hdr->env->x_label != NULL && new != NULL &&
+			strcmp(hdr->env->x_label, new) == 0)
+		return 0;
+	if (hdr->env->x_label != NULL)
+		FREE(&hdr->env->x_label);
+	if (new == NULL)
+		hdr->env->x_label = NULL;
+	else
+		hdr->env->x_label = safe_strdup(new);
+	return hdr->changed = hdr->xlabel_changed = 1;
+}
+
+int mutt_label_message(HEADER *hdr)
+{
+	char buf[LONG_STRING], *new;
+	int i;
+	int changed;
+
+	*buf = '\0';
+	if (hdr != NULL && hdr->env->x_label != NULL) {
+		strncpy(buf, hdr->env->x_label, LONG_STRING);
+	}
+
+	mutt_get_field("Label: ", buf, sizeof(buf), 0 /* | M_CLEAR */);
+	new = buf;
+	SKIPWS(new);
+	if (*new == '\0')
+		new = NULL;
+
+	changed = 0;
+	if (hdr != NULL) {
+		changed += label_message(hdr, new);
+	} else {
+#define HDR_OF(index)	Context->hdrs[Context->v2r[(index)]]
+		for (i = 0; i < Context->vcount; ++i) {
+			if (HDR_OF(i)->tagged)
+				if (label_message(HDR_OF(i), new)) {
+					++changed;
+					mutt_set_flag(Context, HDR_OF(i),
+						M_TAG, 0);
+				}
+		}
+	}
+
+	return changed;
+}
diff -Naru mutt-1.5.20.orig/imap/imap.c mutt-1.5.20/imap/imap.c
--- mutt-1.5.20.orig/imap/imap.c	2010-06-27 12:43:42.261006151 +0200
+++ mutt-1.5.20/imap/imap.c	2010-06-27 12:38:39.180006973 +0200
@@ -1225,7 +1225,7 @@
        * we delete the message and reupload it.
        * This works better if we're expunging, of course. */
       if ((h->env && (h->env->refs_changed || h->env->irt_changed)) ||
-	  h->attach_del)
+	  h->attach_del || h->xlabel_changed)
       {
         mutt_message (_("Saving changed messages... [%d/%d]"), n+1,
                       ctx->msgcount);
@@ -1235,6 +1235,7 @@
 	  dprint (1, (debugfile, "imap_sync_mailbox: Error opening mailbox in append mode\n"));
 	else
 	  _mutt_save_message (h, appendctx, 1, 0, 0);
+	h->xlabel_changed = 0;
       }
     }
   }
diff -Naru mutt-1.5.20.orig/imap/message.c mutt-1.5.20/imap/message.c
--- mutt-1.5.20.orig/imap/message.c	2010-06-27 12:43:42.292015058 +0200
+++ mutt-1.5.20/imap/message.c	2010-06-27 12:38:39.260005684 +0200
@@ -398,6 +398,7 @@
   IMAP_CACHE *cache;
   int read;
   int rc;
+  char *x_label = NULL;
   /* Sam's weird courier server returns an OK response even when FETCH
    * fails. Thanks Sam. */
   short fetched = 0;
diff -Naru mutt-1.5.20.orig/init.h mutt-1.5.20/init.h
--- mutt-1.5.20.orig/init.h	2010-06-27 12:34:09.516008146 +0200
+++ mutt-1.5.20/init.h	2010-06-27 12:39:35.625006941 +0200
@@ -3573,6 +3573,7 @@
   { "to",		SORT_TO },
   { "score",		SORT_SCORE },
   { "spam",		SORT_SPAM },
+  { "label",		SORT_LABEL },
   { NULL,               0 }
 };
 
@@ -3592,6 +3593,7 @@
   { "to",		SORT_TO },
   { "score",		SORT_SCORE },
   { "spam",		SORT_SPAM },
+  { "label",		SORT_LABEL },
   { NULL,               0 }
 };
 
diff -Naru mutt-1.5.20.orig/mh.c mutt-1.5.20/mh.c
--- mutt-1.5.20.orig/mh.c	2010-06-27 12:43:55.660007017 +0200
+++ mutt-1.5.20/mh.c	2010-06-27 12:38:39.316006823 +0200
@@ -1559,7 +1559,7 @@
 {
   HEADER *h = ctx->hdrs[msgno];
 
-  if (h->attach_del || 
+  if (h->attach_del || h->xlabel_changed ||
       (h->env && (h->env->refs_changed || h->env->irt_changed)))
     if (mh_rewrite_message (ctx, msgno) != 0)
       return -1;
@@ -1571,7 +1571,7 @@
 {
   HEADER *h = ctx->hdrs[msgno];
 
-  if (h->attach_del || 
+  if (h->attach_del || h->xlabel_changed ||
       (h->env && (h->env->refs_changed || h->env->irt_changed)))
   {
     /* when doing attachment deletion/rethreading, fall back to the MH case. */
@@ -1693,6 +1693,7 @@
       }
     }
     else if (ctx->hdrs[i]->changed || ctx->hdrs[i]->attach_del ||
+	     ctx->hdrs[i]->xlabel_changed ||
 	     (ctx->magic == M_MAILDIR
 	      && (option (OPTMAILDIRTRASH) || ctx->hdrs[i]->trash)
 	      && (ctx->hdrs[i]->deleted != ctx->hdrs[i]->trash)))
diff -Naru mutt-1.5.20.orig/mutt.h mutt-1.5.20/mutt.h
--- mutt-1.5.20.orig/mutt.h	2010-06-27 12:43:55.728006808 +0200
+++ mutt-1.5.20/mutt.h	2010-06-27 12:38:39.344006119 +0200
@@ -770,6 +770,7 @@
 					 * This flag is used by the maildir_trash
 					 * option.
 					 */
+  unsigned int xlabel_changed : 1;	/* editable - used for syncing */
   
   /* timezone of the sender of this message */
   unsigned int zhours : 5;
diff -Naru mutt-1.5.20.orig/pager.c mutt-1.5.20/pager.c
--- mutt-1.5.20.orig/pager.c	2010-06-27 12:43:57.661007984 +0200
+++ mutt-1.5.20/pager.c	2010-06-27 12:38:39.420007298 +0200
@@ -2782,6 +2782,18 @@
 	redraw = REDRAW_FULL;
 	break;
 
+     case OP_EDIT_LABEL:
+        CHECK_MODE(IsHeader (extra));
+        rc = mutt_label_message(extra->hdr);
+        if (rc > 0) {
+          Context->changed = 1;
+          redraw = REDRAW_FULL;
+          mutt_message ("%d label%s changed.", rc, rc == 1 ? "" : "s");
+        }
+        else {
+          mutt_message _("No labels changed.");
+        }
+        break;
 
       case OP_MAIL_KEY:
         if (!(WithCrypto & APPLICATION_PGP))
diff -Naru mutt-1.5.20.orig/protos.h mutt-1.5.20/protos.h
--- mutt-1.5.20.orig/protos.h	2010-06-27 12:43:57.729005497 +0200
+++ mutt-1.5.20/protos.h	2010-06-27 12:38:39.456006670 +0200
@@ -185,6 +185,7 @@
 void mutt_edit_file (const char *, const char *);
 void mutt_edit_headers (const char *, const char *, HEADER *, char *, size_t);
 int mutt_filter_unprintable (char **);
+int mutt_label_message (HEADER *);
 void mutt_curses_error (const char *, ...);
 void mutt_curses_message (const char *, ...);
 void mutt_enter_command (void);
diff -Naru mutt-1.5.20.orig/sort.c mutt-1.5.20/sort.c
--- mutt-1.5.20.orig/sort.c	2010-06-27 12:43:57.785006262 +0200
+++ mutt-1.5.20/sort.c	2010-06-27 12:38:39.476006474 +0200
@@ -219,6 +219,36 @@
   return (SORTCODE(result));
 }
 
+int compare_label (const void *a, const void *b)
+{
+  HEADER **ppa = (HEADER **) a;
+  HEADER **ppb = (HEADER **) b;
+  int     ahas, bhas, result;
+
+  /* As with compare_spam, not all messages will have the x-label
+   * property.  Blank X-Labels are treated as null in the index
+   * display, so we'll consider them as null for sort, too.       */
+  ahas = (*ppa)->env && (*ppa)->env->x_label && *((*ppa)->env->x_label);
+  bhas = (*ppb)->env && (*ppb)->env->x_label && *((*ppb)->env->x_label);
+
+  /* First we bias toward a message with a label, if the other does not. */
+  if (ahas && !bhas)
+    return (SORTCODE(-1));
+  if (!ahas && bhas)
+    return (SORTCODE(1));
+
+  /* If neither has a label, use aux sort. */
+  if (!ahas && !bhas)
+  {
+    AUXSORT(result, a, b);
+    return (SORTCODE(result));
+  }
+
+  /* If both have a label, we just do a lexical compare. */
+  result = mutt_strcasecmp((*ppa)->env->x_label, (*ppb)->env->x_label);
+  return (SORTCODE(result));
+}
+
 sort_t *mutt_get_sort_func (int method)
 {
   switch (method & SORT_MASK)
@@ -241,6 +271,8 @@
       return (compare_score);
     case SORT_SPAM:
       return (compare_spam);
+    case SORT_LABEL:
+      return (compare_label);
     default:
       return (NULL);
   }
diff -Naru mutt-1.5.20.orig/sort.h mutt-1.5.20/sort.h
--- mutt-1.5.20.orig/sort.h	2010-06-27 12:43:57.845006045 +0200
+++ mutt-1.5.20/sort.h	2010-06-27 12:38:39.536006200 +0200
@@ -31,6 +31,7 @@
 #define SORT_KEYID	12
 #define SORT_TRUST	13
 #define SORT_SPAM	14
+#define SORT_LABEL	15
 /* dgc: Sort & SortAux are shorts, so I'm bumping these bitflags up from
  * bits 4 & 5 to bits 8 & 9 to make room for more sort keys in the future. */
 #define SORT_MASK	0xff
